using System.Collections;
using System.Collections.Generic;
using Code.Infrastructure.View;
using DG.Tweening;
using UnityEngine;

namespace Code.Gameplay.Towers.View
{
    public class CatapultLevelViewController : MonoBehaviour
    {
        [SerializeField] private EntityBehaviour _entityBehaviour;
        [SerializeField] private List<Transform> _blueTowers;
        [SerializeField] private List<Transform> _redTowers;
        [SerializeField] private List<Transform> _neutralTowers;
        [SerializeField] private float _morphDuration;
        [SerializeField] private float _scaleBounceDuration;
        [SerializeField] private Ease _morphEase;
        [SerializeField] private Ease _bounceEase;
        private int _currentTowerIndex;
        
        public void StartMorph(int targetIndex)
        {
            if (targetIndex < 0 || targetIndex >= _blueTowers.Count || targetIndex == _currentTowerIndex)
                return;
            
            StartCoroutine(MorphSequence(targetIndex));
        }

        private IEnumerator MorphSequence(int targetIndex)
        {
            Transform currentTower = null;
            Transform targetTower = null; 
            
            switch (_entityBehaviour.Entity.towerFraction.Value)
            {
                case TowerFractionsEnum.Blue:
                    currentTower = _blueTowers[_currentTowerIndex];
                    targetTower = _blueTowers[targetIndex];
                    break;
                case TowerFractionsEnum.Red:
                    currentTower = _redTowers[_currentTowerIndex];
                    targetTower = _redTowers[targetIndex];
                    break;
                case TowerFractionsEnum.Neutral:
                    currentTower = _neutralTowers[_currentTowerIndex];
                    targetTower = _neutralTowers[targetIndex];
                    break;
            }
            
            targetTower.gameObject.SetActive(true);
            targetTower.localScale = Vector3.zero;

            Sequence morphSequence = DOTween.Sequence();

            morphSequence.Append(currentTower.DOScale(Vector3.zero, _morphDuration * 0.4f)
                .SetEase(Ease.InQuart));

            morphSequence.AppendInterval(0.1f);

            morphSequence.AppendCallback(() => 
            {
                currentTower.gameObject.SetActive(false);
                currentTower.localScale = Vector3.one;
            });
            
            morphSequence.Append(targetTower.DOScale(Vector3.one, _morphDuration * 0.5f)
                .SetEase(_morphEase));
            
            morphSequence.OnComplete(() => 
            {
                _currentTowerIndex = targetIndex;
            });
            
            yield return morphSequence.WaitForCompletion();
        }
    }
}